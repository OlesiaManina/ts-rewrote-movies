{"version":3,"file":"static/js/787.06216305.chunk.js","mappings":"sLAWA,MAiCA,EAjCaA,KACT,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACbC,EAAUC,IAAeC,EAAAA,EAAAA,UAAkB,IAelD,OAbAC,EAAAA,EAAAA,YAAU,KACN,IAAKL,EAAS,OACIM,WACd,IACA,MAAMC,QAAiBC,EAAAA,EAAUC,cAAcT,GAC/CG,EAAYI,EAASG,KAAKC,KAC1B,CAAE,MAAOC,GACTC,QAAQC,IAAIF,EACZ,GAEJG,EAAW,GACZ,CAACf,KAGAgB,EAAAA,EAAAA,KAAA,MAAIC,MAAO,CAACC,QAAS,OAAQC,IAAK,GAAIC,SAAU,OAAQC,eAAgB,SAAUC,QAAS,GAAGC,SAC7FrB,GAAYA,EAASsB,KAAIC,IAAA,IAAC,GAACC,EAAE,aAAEC,EAAY,cAAEC,EAAa,UAAEC,GAAUJ,EAAA,OACtEK,EAAAA,EAAAA,MAAA,MACDb,MAAO,CAACc,MAAO,KAAKR,SAAA,EAEhBP,EAAAA,EAAAA,KAAA,OAAKgB,IAAKL,GAAY,mCAAAM,OAAuCN,GAC7DO,IAAKN,EACLG,MAAO,OACPf,EAAAA,EAAAA,KAAA,MAAAO,SAAKK,KACLE,EAAAA,EAAAA,MAAA,KAAAP,SAAA,CAAG,cAAYM,OALdH,EAMA,KACA,C,8CCtCbS,EAAAA,EAAMC,SAASC,QAAU,8BACzB,MAAMC,EAAU,mCA2BhB,MAEA,EAFY,CAACC,cAzBbjC,iBAEI,aADuB6B,EAAAA,EAAMK,IAAI,gCAADP,OAAiCK,KACjD5B,KAAK+B,OACzB,EAsB4BC,gBApB5BpC,eAAgCqC,GAE9B,aADuBR,EAAAA,EAAMK,IAAI,WAADP,OAAYU,EAAQ,aAAAV,OAAYK,GAElE,EAiB6C7B,cAf7CH,eAA8BqC,GAE5B,aADuBR,EAAAA,EAAMK,IAAI,WAADP,OAAYU,EAAQ,qBAAAV,OAAoBK,GAE1E,EAY4DM,aAV5DtC,eAA6BqC,GAE3B,aADuBR,EAAAA,EAAMK,IAAI,WAADP,OAAYU,EAAQ,qBAAAV,OAAoBK,GAE1E,EAO0EO,cAL1EvC,eAA8BwC,GAE5B,aADuBX,EAAAA,EAAMK,IAAI,0BAADP,OAA2BK,EAAO,WAAAL,OAAUa,GAE9E,E","sources":["components/Cast.tsx","moviesAPI.ts"],"sourcesContent":["import {  useParams } from \"react-router-dom\";\r\nimport moviesAPI from '../moviesAPI';\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface ICast {\r\n    id: string; \r\n    profile_path: string;\r\n    original_name: string;\r\n    character: string;\r\n}\r\n\r\nconst Cast = () => {\r\n    const { movieId } = useParams<{ movieId: string }>();\r\n    const [castList, setCastList] = useState<ICast[]>([])\r\n\r\n    useEffect(()=> {\r\n        if (!movieId) return;\r\n        const fetchCast = async () => {\r\n            try {\r\n            const response = await moviesAPI.fetchCastInfo(movieId);\r\n            setCastList(response.data.cast);\r\n            } catch (error) {\r\n            console.log(error)\r\n            }\r\n        }\r\n        fetchCast();\r\n    }, [movieId])\r\n\r\n    return (\r\n        <ul style={{display: 'flex', gap: 15, flexWrap: 'wrap', justifyContent: 'center', padding: 0}}>\r\n        {castList && castList.map(({id, profile_path, original_name, character}) => \r\n        (<li \r\n        style={{width: 160}}\r\n        key={id}>\r\n            <img src={profile_path && `https://image.tmdb.org/t/p/w500/${profile_path}`} \r\n            alt={original_name}  \r\n            width={160}/>\r\n            <h4>{original_name}</h4>\r\n            <p>Character: {character}</p>\r\n        </li>))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Cast;","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\r\nconst API_KEY = '24133b1b6fb1e59d7b163caa4eec50ae';\r\n\r\nasync function fetchTranding () {\r\n    const response = await axios.get(`3/trending/movie/day?api_key=${API_KEY}`);\r\n    return response.data.results;\r\n}\r\n\r\nasync function fetchDetailInfo (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchCastInfo (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}/credits?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchReviews (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}/reviews?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchBySearch (value: string) {\r\n  const response = await axios.get(`3/search/movie?api_key=${API_KEY}&query=${value}`);\r\n  return response;\r\n}\r\n\r\nconst api = {fetchTranding, fetchDetailInfo, fetchCastInfo, fetchReviews, fetchBySearch};\r\n\r\nexport default api;"],"names":["Cast","movieId","useParams","castList","setCastList","useState","useEffect","async","response","moviesAPI","fetchCastInfo","data","cast","error","console","log","fetchCast","_jsx","style","display","gap","flexWrap","justifyContent","padding","children","map","_ref","id","profile_path","original_name","character","_jsxs","width","src","concat","alt","axios","defaults","baseURL","API_KEY","fetchTranding","get","results","fetchDetailInfo","movie_id","fetchReviews","fetchBySearch","value"],"sourceRoot":""}