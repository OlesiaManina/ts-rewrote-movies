{"version":3,"file":"static/js/742.f402c818.chunk.js","mappings":"8IAEAA,EAAAA,EAAMC,SAASC,QAAU,8BACzB,MAAMC,EAAU,mCA2BhB,MAEA,EAFY,CAACC,cAzBbC,iBAEI,aADuBL,EAAAA,EAAMM,IAAI,gCAADC,OAAiCJ,KACjDK,KAAKC,OACzB,EAsB4BC,gBApB5BL,eAAgCM,GAE9B,aADuBX,EAAAA,EAAMM,IAAI,WAADC,OAAYI,EAAQ,aAAAJ,OAAYJ,GAElE,EAiB6CS,cAf7CP,eAA8BM,GAE5B,aADuBX,EAAAA,EAAMM,IAAI,WAADC,OAAYI,EAAQ,qBAAAJ,OAAoBJ,GAE1E,EAY4DU,aAV5DR,eAA6BM,GAE3B,aADuBX,EAAAA,EAAMM,IAAI,WAADC,OAAYI,EAAQ,qBAAAJ,OAAoBJ,GAE1E,EAO0EW,cAL1ET,eAA8BU,GAE5B,aADuBf,EAAAA,EAAMM,IAAI,0BAADC,OAA2BJ,EAAO,WAAAI,OAAUQ,GAE9E,E,8FCvBA,MAmDA,EAnDeC,KAAO,IAADC,EACjB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAmB,KACxCC,EAAcC,IAAmBC,EAAAA,EAAAA,MAClCC,EAAyC,QAA5BP,EAAGI,EAAaf,IAAI,gBAAQ,IAAAW,EAAAA,EAAI,GAC7CQ,GAAWC,EAAAA,EAAAA,MA8BjB,OAfEC,EAAAA,EAAAA,YAAU,KACR,IAAKH,EAAO,OAEQnB,WAChB,IACA,MAAMuB,QAAiBC,EAAAA,EAAUf,cAAcU,GAC/CL,EAAUS,EAASpB,KAAKC,QAExB,CAAE,MAAOqB,GACTC,QAAQC,IAAIF,EACZ,GAEJG,EAAa,GACd,CAACT,KAGAU,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAF,EAAAA,EAAAA,MAAA,QAAMG,SA7BaC,IACnBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,cACT1B,EAASyB,EAAKE,cAAc,uBAA4C3B,MAC9E,GAAc,KAAVA,EACA,OAAOO,EAAgB,CAAC,GAE5BA,EAAgB,CAAEE,MAAOT,IACzByB,EAAKG,OAAO,EAqBiBP,SAAA,EAC7BQ,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAOC,KAAK,WACxBF,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASE,MAAO,CAACC,WAAY,OAAOZ,SAAC,eAGpDQ,EAAAA,EAAAA,KAAA,MAAIG,MAAO,CAACE,QAAS,OAAQC,cAAe,SAAUC,IAAK,QAAQf,SAChElB,GAAUM,GAASN,EAAOkC,KAAIC,IAAA,IAAC,GAACC,EAAE,MAAEC,GAAMF,EAAA,OAC1CT,EAAAA,EAAAA,KAAA,MAAaG,MAAO,CAACS,SAAU,OAAQC,MAAO,SAASrB,UACtDQ,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACC,GAAE,WAAApD,OAAa+C,GAAMM,MAAO,CAAEC,KAAMpC,GAAWW,SAAEmB,KAD/CD,EAEH,QAEJ,C","sources":["moviesAPI.ts","pages/Movies.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\r\nconst API_KEY = '24133b1b6fb1e59d7b163caa4eec50ae';\r\n\r\nasync function fetchTranding () {\r\n    const response = await axios.get(`3/trending/movie/day?api_key=${API_KEY}`);\r\n    return response.data.results;\r\n}\r\n\r\nasync function fetchDetailInfo (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchCastInfo (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}/credits?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchReviews (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}/reviews?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchBySearch (value: string) {\r\n  const response = await axios.get(`3/search/movie?api_key=${API_KEY}&query=${value}`);\r\n  return response;\r\n}\r\n\r\nconst api = {fetchTranding, fetchDetailInfo, fetchCastInfo, fetchReviews, fetchBySearch};\r\n\r\nexport default api;","import { useSearchParams, useLocation, Link } from \"react-router-dom\";\r\nimport moviesAPI from '../moviesAPI';\r\nimport { useState, useEffect, FormEvent } from \"react\";\r\nimport { IMovie } from './MovieDetails';\r\n\r\nconst Movies = () => {\r\n    const [movies, setMovies] = useState<IMovie[]>([]);\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const query: string = searchParams.get(\"query\") ?? '';\r\n    const location = useLocation();\r\n    \r\n\r\n    const handleSubmit = ( e: FormEvent<HTMLFormElement> )  => {\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n        const value = (form.querySelector('input[name=\"query\"]') as HTMLInputElement).value;\r\n        if (value === '') {\r\n            return setSearchParams({});\r\n        }\r\n        setSearchParams({ query: value });\r\n        form.reset();\r\n      };\r\n\r\n\r\n      useEffect(() => {\r\n        if (!query) return;\r\n\r\n        const fetchMovies = async () => {\r\n            try {\r\n            const response = await moviesAPI.fetchBySearch(query)\r\n            setMovies(response.data.results);\r\n            \r\n            } catch (error) {\r\n            console.log(error)\r\n            }\r\n        }\r\n        fetchMovies();\r\n    }, [query])\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" name=\"query\" />\r\n        <button type=\"submit\" style={{marginLeft: \"8px\"}}>Search</button>\r\n      </form>\r\n\r\n      <ul style={{display: \"flex\", flexDirection: 'column', gap: \"10px\"}}>\r\n        {movies && query && movies.map(({id, title}) => \r\n        (<li key={id} style={{fontSize: '10px', color: 'black'}}>\r\n          <Link to={`/movies/${id}`} state={{ from: location }}>{title}</Link>\r\n          </li>))}\r\n    </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Movies;"],"names":["axios","defaults","baseURL","API_KEY","fetchTranding","async","get","concat","data","results","fetchDetailInfo","movie_id","fetchCastInfo","fetchReviews","fetchBySearch","value","Movies","_searchParams$get","movies","setMovies","useState","searchParams","setSearchParams","useSearchParams","query","location","useLocation","useEffect","response","moviesAPI","error","console","log","fetchMovies","_jsxs","_Fragment","children","onSubmit","e","preventDefault","form","currentTarget","querySelector","reset","_jsx","type","name","style","marginLeft","display","flexDirection","gap","map","_ref","id","title","fontSize","color","Link","to","state","from"],"sourceRoot":""}