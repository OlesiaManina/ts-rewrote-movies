{"version":3,"file":"static/js/42.67f39c0c.chunk.js","mappings":"oLAcA,MA+BA,EA/BgBA,KACZ,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACbC,EAASC,IAAkBC,EAAAA,EAAAA,UAAoB,IAetD,OAbAC,EAAAA,EAAAA,YAAU,KACN,IAAKL,EAAS,OACOM,WACjB,IACA,MAAMC,QAAiBC,EAAAA,EAAUC,aAAaT,GAC9CG,EAAeI,EAASG,KAAKC,QAC7B,CAAE,MAAOC,GACTC,QAAQC,IAAIF,EACZ,GAEJH,EAAc,GACf,CAACT,KAGAe,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACoB,IAAnBf,EAAQgB,QACLH,EAAAA,EAAAA,KAAA,MAAAE,SACCf,EAAQiB,KAAIC,IAAA,IAAC,GAACC,EAAE,eAAEC,EAAc,QAAEC,GAAQH,EAAA,OAAMI,EAAAA,EAAAA,MAAA,MAAAP,SAAA,CAC5CK,EAAeG,OAAQD,EAAAA,EAAAA,MAAA,MAAAP,SAAA,CAAI,UAAQK,EAAeG,SACnDD,EAAAA,EAAAA,MAAA,KAAAP,SAAA,CAAG,cAAYM,OAFuCF,EAGrD,OAEHN,EAAAA,EAAAA,KAAA,KAAAE,SAAG,8BACN,C,8CCvCXS,EAAAA,EAAMC,SAASC,QAAU,8BACzB,MAAMC,EAAU,mCA2BhB,MAEA,EAFY,CAACC,cAzBbxB,iBAEI,aADuBoB,EAAAA,EAAMK,IAAI,gCAADC,OAAiCH,KACjDnB,KAAKC,OACzB,EAsB4BsB,gBApB5B3B,eAAgC4B,GAE9B,aADuBR,EAAAA,EAAMK,IAAI,WAADC,OAAYE,EAAQ,aAAAF,OAAYH,GAElE,EAiB6CM,cAf7C7B,eAA8B4B,GAE5B,aADuBR,EAAAA,EAAMK,IAAI,WAADC,OAAYE,EAAQ,qBAAAF,OAAoBH,GAE1E,EAY4DpB,aAV5DH,eAA6B4B,GAE3B,aADuBR,EAAAA,EAAMK,IAAI,WAADC,OAAYE,EAAQ,qBAAAF,OAAoBH,GAE1E,EAO0EO,cAL1E9B,eAA8B+B,GAE5B,aADuBX,EAAAA,EAAMK,IAAI,0BAADC,OAA2BH,EAAO,WAAAG,OAAUK,GAE9E,E","sources":["components/Reviews.tsx","moviesAPI.ts"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport moviesAPI from '../moviesAPI';\r\nimport { useState, useEffect } from \"react\";\r\n\r\ntype Author = {\r\n    name: string;\r\n}\r\n\r\ninterface IReview {\r\n    id: string;\r\n    author_details: Author; \r\n    content: string;\r\n}\r\n\r\nconst Reviews = () => {\r\n    const { movieId } = useParams<{ movieId: string }>();\r\n    const [reviews, setCastReviews] = useState<IReview[]>([])\r\n\r\n    useEffect(()=> {\r\n        if (!movieId) return;\r\n        const fetchReviews = async () => {\r\n            try {\r\n            const response = await moviesAPI.fetchReviews(movieId);\r\n            setCastReviews(response.data.results);\r\n            } catch (error) {\r\n            console.log(error)\r\n            }\r\n        }\r\n        fetchReviews();\r\n    }, [movieId])\r\n\r\n    return (\r\n        <>\r\n        {reviews.length !== 0? \r\n            <ul>\r\n            {reviews.map(({id, author_details, content}) => (<li key={id}>\r\n                {author_details.name && <h5>Autor: {author_details.name}</h5>}\r\n                <p>Character: {content}</p>\r\n            </li>))}\r\n            </ul> \r\n            : <p>There are no reviews....</p>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Reviews;","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\r\nconst API_KEY = '24133b1b6fb1e59d7b163caa4eec50ae';\r\n\r\nasync function fetchTranding () {\r\n    const response = await axios.get(`3/trending/movie/day?api_key=${API_KEY}`);\r\n    return response.data.results;\r\n}\r\n\r\nasync function fetchDetailInfo (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchCastInfo (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}/credits?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchReviews (movie_id: string) {\r\n  const response = await axios.get(`3/movie/${movie_id}/reviews?api_key=${API_KEY}`);\r\n  return response;\r\n}\r\n\r\nasync function fetchBySearch (value: string) {\r\n  const response = await axios.get(`3/search/movie?api_key=${API_KEY}&query=${value}`);\r\n  return response;\r\n}\r\n\r\nconst api = {fetchTranding, fetchDetailInfo, fetchCastInfo, fetchReviews, fetchBySearch};\r\n\r\nexport default api;"],"names":["Reviews","movieId","useParams","reviews","setCastReviews","useState","useEffect","async","response","moviesAPI","fetchReviews","data","results","error","console","log","_jsx","_Fragment","children","length","map","_ref","id","author_details","content","_jsxs","name","axios","defaults","baseURL","API_KEY","fetchTranding","get","concat","fetchDetailInfo","movie_id","fetchCastInfo","fetchBySearch","value"],"sourceRoot":""}